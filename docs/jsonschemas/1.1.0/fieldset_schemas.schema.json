{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
	"$id": "https://kenfigure.com/jsonschemas/latest/fieldset_schemas.schema.json",
  "title": "Fieldset schemas",
  "description": "Â© 2025 Go2 Software LLC. Licensed under the Open Data Commons Attribution License (ODC-By). 'Kenfigure' is a trademark of Go2 Software LLC. Unauthorized use is prohibited.",
  "comment": "All types of fieldset schemas (e.g., Custom enity, DNA Sequence, etc.). Does not currently support tool tips or parent links for fields.",
  "type": "array",
  "minItems": 0,
  "uniqueItems": true,
  "items": {
    "$comment": "See various TODOs",
    "title": "Fieldset schema definition",
    "description": "Complete description of the fieldset schema.",
    "required": ["Name"],
    "type": "object",
    "properties": {
      "Name": {
        "description": "Fieldset schema name.",
        "type": "string"
      },
      "System name": {
        "description": "Internal system name. Default will be an automatic conversion of Name to a Benchling/PostgreSQL compatible name.",
        "type": "string",
        "pattern": "^[a-z_][a-z0-9_]{0,62}$"
      },
      "Description": {
        "description": "Documentation for the fieldset schema. This is not saved to Benchling.",
        "type": "string"
      },
      "Notify": {
        "description": "Causes the supplied message to be printed to the output during an import operation. Use this to tell the user to take some manual action such as setting permissions.",
        "type": "string"
      },
      "Entity type": {
        "description": "Must match one of the Benchling-defined types. May be 'None' to enable attaching to any type of entity schema.",
        "type": "string",
        "enum": ["None", "Custom Entity", "DNA Sequence", "DNA Oligo", "RNA Oligo", "RNA Sequence", "AA Sequence", "Molecule", "Mixture"]
      },
      "Category": {
        "description": "If true (default), this fieldset will appear as a navigation category for end users, and an option for field definitions.",
        "type": "boolean"
      },
      "Prefix": {
        "description": "The registry ID prefix. If specified, will override the prefix for all attached entity schemas.",
        "type": "string",
        "pattern": "^[a-zA-Z0-9_.-]*[a-zA-Z_.-]?$"
      },
      "Naming options": {
        "description": "Available registration naming options. If specified, will override the naming options for all attached entity schemas.",
        "type": "array",
        "minItems": 0,
        "uniqueItems": true,
        "items": {
          "description": "Valid enum values include symbolic names and full text versions",
          "type": "string",
          "enum": [
            "NEW_IDS", "Generate new registry IDs",
            "IDS_FROM_NAMES", "Generate registry IDs based on entity names",
            "DELETE_NAMES", "Generate new registry IDs and replace name with registry ID",
            "SET_FROM_NAME_PARTS", "Generate new registry IDs, rename according to name template, and keep old name as alias",
            "REPLACE_NAMES_FROM_PARTS", "Generate new registry IDs, and replace name according to name template",
            "KEEP_NAMES", "Keep existing entity names as registry IDs",
            "REPLACE_ID_AND_NAME_FROM_PARTS", "Generate registry IDs and names according to name template"
          ]
        }
      },
      "Name template": {
        "description": "Naming template.",
        "type": "array",
        "minItems": 0,
        "uniqueItems": false,
        "items": {
          "title": "Name template components",
          "description": "Name template components",
          "type": "object",
          "required": ["Type"],
          "properties": {
            "Type": {
              "description": "The type of name component.",
              "type": "string",
              "enum": [
                "Registry ID number",
                "Creation year",
                "Creation date",
                "Project",
                "Text",
                "Separator",
                "Field",
                "Parent lot number",
                "Registry ID of field"
              ]
            },
            "Definition": {
              "description": "Depending on Type will be text, a field name, or may be omitted if N/A.",
              "type": "string"
            }
          }
        },
        "$comment": "TODO: Need to define this better. How handle pre-defiend values like separator, lot, etc."
      },
      "Constraint": {
        "description": "List of fields to define constraint. Maybe empty. May contain special built-in field descriptions. If specified, will override the constraint for all attached entity schemas.",
        "type": "array",
        "minItems": 0,
        "uniqueItems": true,
        "items": {
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "Bases (ignore case)",
                "Canonical SMILES",
                "Amino acids (exact match)",
                "Amino acids (ignore case)"
              ]
            },
            {
              "type": "string"
            }
          ]
        }
      },
      "Diagram": {
        "description": "Properties solely used for diagram rendering.",
        "$ref": "https://kenfigure.com/jsonschemas/latest/diagram.schema.json"
      },
      "Fields": {
        "description": "Metadata fields",
        "type": "array",
        "minItems": 0,
        "uniqueItems" : true,
        "items": {
          "title": "List of metadata fields",
          "description": "Metadata field definitions",
          "type": "object",
          "required": ["Name", "Type"],
          "properties": {
            "Name": {
              "description": "Field name.",
              "type": "string"
            },
            "Description": {
              "description": "Documentation for the field. This is not saved to Benchling.",
              "type": "string"
            },
            "System name": {
              "description": "Internal system name for the field. Default will be an automatic conversion of Name to a Benchling/PostgreSQL compatible name.",
              "type": "string",
              "pattern": "^[a-z_][a-z0-9_]{0,62}$"
            },
            "Required": {
              "description": "Field is required when true",
              "type": "boolean"
            },
            "Multi-select": {
              "description": "Field is a multi-select field when true.",
              "type": "boolean"
            },
            "Type": {
              "description": "Data type for the field.",
              "type": "string",
              "enum": [
                "Date",
                "Datetime",
                "Decimal",
                "Integer",
                "Long text",
                "Dropdown",
                "Text",
                "Attachment",
                "Entry",
                "Entity",
                "Part",
                "Inventory",
                "ft_translation_link",
                "ft_assay_result_link",
                "ft_assay_run_link"
              ]
            },
            "Definition": {
              "description": "Name of target object if Type is a one of the link types.",
              "anyOf": [
                {
                  "type": "string",
                  "enum": [
                    "Any Entity",
                    "Custom Entity",
                    "AA Sequence",
                    "DNA Sequence",
                    "Molecule",
                    "Mixture"
                  ]
                },
                {
                  "type": "string"
                }
              ]
            },
            "Computed": {
              "description": "Describes the computed field. Only present for computed fields.",
              "type": "object",
              "required": ["Formula"],
              "properties": {
                "Formula name": {
                  "description": "Name of formula using native Benchling tokens for now.",
                  "type": "string",
                  "enum": [
                    "UNSUPPORTED_FORMULA",
                    "sum_floats",
                    "string_length",
                    "dna_sequence_gc_percent",
                    "set_union_file_link",
                    "set_union_selector",
                    "join_string",
                    "multiply_with_exponents",

                    "mod_aware_molecular_weight",
                    "render_molecule_from_smiles",
                    "identity_fn",
                    "aggregate_bioentity_link_unsorted_with_duplicates",
                    "aggregate_dropdown_unsorted_with_duplicates",
                    "aggregate_text_unsorted_with_duplicates"
                  ]
                },
                "Path": {
                  "description": "List of entities to get to the final entity or field. TODO-Can this just be a list. Will type ever not be Field?",
                  "type": "array",
                  "minItems": 0,
                  "items": {
                    "title": "List of path objects.",
                    "type": "object",
                    "required": ["Type"],
                    "properties": {
                      "Type": {
                        "description": "Type of path component. Only Field is valid for now.",
                        "type": "string",
                        "enum": [
                          "Field"
                        ]
                      },
                      "Definition": {
                        "description": "Name for the given type. Usually a field name.",
                        "type": "string"
                      }
                    }
                  }
                },
                "Property": {
                  "description": "The final value to return/compute at the end of the Path.",
                  "type": "object",
                  "required": ["Type"],
                  "properties": {
                    "Type": {
                      "description": "The type of property. Normally Field, but use BASES to access the built-in Bases field.",
                      "type": "string",
                      "enum": [
                          "Field",
                          "BASES"
                      ]
                    },
                    "Definition": {
                      "description": "The name of the field if type is Field.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "API ID": {
        "description": "API ID for the entity schema created during an export operation. This is ignored for import operations.",
        "type": "string"
      }
    }
  }
}